name: SonarQube

on:
  push:
    branches: [ "nevein25-patch-1" ]
  pull_request:
    branches: [ "nevein25-patch-1" ]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest

    steps:
      # 1. Setup JDK (required by Sonar)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # 2. Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # full history needed for Sonar analysis

      # 3. Setup .NET (match your project version!)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # 4. Cache SonarQube
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # 5. Install Sonar Scanner (if cache miss)
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # 6. Restore, Build, and Analyze
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"nevein25_e-taberna" /o:"nevein25" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
          dotnet restore src/E-Taberna.sln
          dotnet build src/E-Taberna.sln --configuration Release --no-incremental
          dotnet test src/E-Taberna.sln --collect:"XPlat Code Coverage" --results-directory TestResults --logger trx
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
